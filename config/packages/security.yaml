security:
    #role_hierarchy:
      #ROLE_ADMIN:       ROLE_USER
      #ROLE_SUPER_ADMIN: [ROLE_ADMIN]
    providers:
      # used to reload user from session & other features (e.g. switch_user)
      app_user_provider:
        entity:
          class: App\Entity\Administrators
          property: email
      admin_user_provider:
        entity:
          class: App\Entity\Administrators
          property: email
    password_hashers:
      # use your user class name here
      App\Entity\Administrators:
        # Use native password encoder
        # This value auto-selects the best possible hashing algorithm
        # (i.e. Sodium when available).
        algorithm: auto
      App\Entity\Users:
        # Use native password encoder
        # This value auto-selects the best possible hashing algorithm
        # (i.e. Sodium when available).
        algorithm: auto
    firewalls:
      dev:
        pattern: ^/(_(profiler|wdt)|css|images|js)/
        security: false
      front:
        lazy: true
        provider: app_user_provider
        #custom_authenticators:
        #  - App\Security\AdminLoginFormAuthenticator
        logout:
          path: app_logout
          # where to redirect after logout
          # target: app_any_route
        form_login:
          login_path: app_login
          check_path: app_login
          enable_csrf: true
      main:
        lazy: true
        provider: admin_user_provider
        custom_authenticators:
          - App\Security\AdminLoginFormAuthenticator
        logout:
          path: admin_logout
          target: admin_login
    access_control:
      # require ROLE_ADMIN for /admin*
      - { path: '^/admin/login', roles: IS_AUTHENTICATED_ANONYMOUSLY }
      - { path: '^/admin', roles: [ROLE_ADMIN, ROLE_SUPER_ADMIN] }

      #- { path: ^/admin/logout, roles: IS_AUTHENTICATED_FULLY }
      #- { path: ^/admin/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
      #- { path: ^/admin/reset, role: IS_AUTHENTICATED_ANONYMOUSLY }
      #- { path: ^/profile, roles: ROLE_USER }
